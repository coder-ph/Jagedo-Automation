 * Serving Flask app 'app.py'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:5001
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.job_rel' will copy column jobs.id to column bids.job_id, which conflicts with relationship(s): 'Bid.job' (copies jobs.id to bids.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job"' to the 'Bid.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.professional_rel' will copy column users.id to column bids.professional_id, which conflicts with relationship(s): 'Bid.professional' (copies users.id to bids.professional_id), 'User.bids' (copies users.id to bids.professional_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bids,professional"' to the 'Bid.professional_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Job.job_attachments' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Job.job_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.job_rel' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Attachment.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.bid_attachments' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Bid.bid_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.bid_rel' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Attachment.bid_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
127.0.0.1 - - [21/May/2025 11:56:59] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 11:56:59] "POST /api/projects HTTP/1.1" 201 -
127.0.0.1 - - [21/May/2025 11:56:59] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 11:56:59] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 11:56:59] "GET /api/projects/1/bids HTTP/1.1" 405 -
 * Detected change in '/home/phyl/Development/Jagedo/Back End/app.py', reloading
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Project
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_bidding_workflow.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_bidding_workflow.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_bidding_workflow.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_bidding_workflow.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.job_rel' will copy column jobs.id to column bids.job_id, which conflicts with relationship(s): 'Bid.job' (copies jobs.id to bids.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job"' to the 'Bid.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.professional_rel' will copy column users.id to column bids.professional_id, which conflicts with relationship(s): 'Bid.professional' (copies users.id to bids.professional_id), 'User.bids' (copies users.id to bids.professional_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bids,professional"' to the 'Bid.professional_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Job.job_attachments' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Job.job_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.job_rel' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Attachment.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.bid_attachments' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Bid.bid_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.bid_rel' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Attachment.bid_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
127.0.0.1 - - [21/May/2025 12:09:02] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:02] "POST /api/projects HTTP/1.1" 201 -
127.0.0.1 - - [21/May/2025 12:09:02] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:03] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:03] "POST /api/projects/1/bids HTTP/1.1" 200 -
[2025-05-21 12:09:03,270] ERROR in app: Error fetching project bids: 'User' object has no attribute 'phone'
[2025-05-21 12:09:03,270] ERROR in app: Full traceback:
Traceback (most recent call last):
  File "/home/phyl/Development/Jagedo/Back End/app.py", line 713, in get_project_bids
    'phone': bid.professional_rel.phone if bid.professional_rel.phone else None,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'User' object has no attribute 'phone'
127.0.0.1 - - [21/May/2025 12:09:03] "GET /api/projects/1/bids HTTP/1.1" 500 -
 * Detected change in '/home/phyl/Development/Jagedo/Back End/app.py', reloading
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.job_rel' will copy column jobs.id to column bids.job_id, which conflicts with relationship(s): 'Bid.job' (copies jobs.id to bids.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job"' to the 'Bid.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.professional_rel' will copy column users.id to column bids.professional_id, which conflicts with relationship(s): 'Bid.professional' (copies users.id to bids.professional_id), 'User.bids' (copies users.id to bids.professional_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bids,professional"' to the 'Bid.professional_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Job.job_attachments' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Job.job_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.job_rel' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Attachment.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.bid_attachments' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Bid.bid_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.bid_rel' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Attachment.bid_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
127.0.0.1 - - [21/May/2025 12:09:29] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "POST /api/projects HTTP/1.1" 201 -
127.0.0.1 - - [21/May/2025 12:09:29] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:09:29] "POST /api/projects/1/select-winner HTTP/1.1" 500 -
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_bidding_workflow.py', reloading
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.job_rel' will copy column jobs.id to column bids.job_id, which conflicts with relationship(s): 'Bid.job' (copies jobs.id to bids.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job"' to the 'Bid.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.professional_rel' will copy column users.id to column bids.professional_id, which conflicts with relationship(s): 'Bid.professional' (copies users.id to bids.professional_id), 'User.bids' (copies users.id to bids.professional_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bids,professional"' to the 'Bid.professional_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Job.job_attachments' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Job.job_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.job_rel' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Attachment.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.bid_attachments' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Bid.bid_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.bid_rel' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Attachment.bid_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
127.0.0.1 - - [21/May/2025 12:10:21] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "POST /api/projects HTTP/1.1" 201 -
127.0.0.1 - - [21/May/2025 12:10:21] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:10:21] "POST /api/projects/1/select-winner HTTP/1.1" 500 -
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_bidding_workflow.py', reloading
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.job_rel' will copy column jobs.id to column bids.job_id, which conflicts with relationship(s): 'Bid.job' (copies jobs.id to bids.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job"' to the 'Bid.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.professional_rel' will copy column users.id to column bids.professional_id, which conflicts with relationship(s): 'Bid.professional' (copies users.id to bids.professional_id), 'User.bids' (copies users.id to bids.professional_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bids,professional"' to the 'Bid.professional_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Job.job_attachments' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Job.job_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.job_rel' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Attachment.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.bid_attachments' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Bid.bid_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.bid_rel' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Attachment.bid_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
127.0.0.1 - - [21/May/2025 12:11:10] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:10] "POST /api/projects HTTP/1.1" 201 -
127.0.0.1 - - [21/May/2025 12:11:10] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:11:11] "POST /api/projects/1/select-winner HTTP/1.1" 500 -
 * Detected change in '/home/phyl/Development/Jagedo/Back End/app.py', reloading
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
 * Detected change in '/home/phyl/Development/Jagedo/Back End/app.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.job_rel' will copy column jobs.id to column bids.job_id, which conflicts with relationship(s): 'Bid.job' (copies jobs.id to bids.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job"' to the 'Bid.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.professional_rel' will copy column users.id to column bids.professional_id, which conflicts with relationship(s): 'Bid.professional' (copies users.id to bids.professional_id), 'User.bids' (copies users.id to bids.professional_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bids,professional"' to the 'Bid.professional_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Job.job_attachments' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Job.job_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.job_rel' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Attachment.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.bid_attachments' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Bid.bid_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.bid_rel' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Attachment.bid_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
127.0.0.1 - - [21/May/2025 12:12:45] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:45] "POST /api/projects HTTP/1.1" 201 -
127.0.0.1 - - [21/May/2025 12:12:45] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:12:46] "POST /api/projects/1/select-winner HTTP/1.1" 500 -
 * Detected change in '/home/phyl/Development/Jagedo/Back End/app.py', reloading
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.job_rel' will copy column jobs.id to column bids.job_id, which conflicts with relationship(s): 'Bid.job' (copies jobs.id to bids.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job"' to the 'Bid.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.professional_rel' will copy column users.id to column bids.professional_id, which conflicts with relationship(s): 'Bid.professional' (copies users.id to bids.professional_id), 'User.bids' (copies users.id to bids.professional_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bids,professional"' to the 'Bid.professional_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Job.job_attachments' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Job.job_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.job_rel' will copy column jobs.id to column attachments.job_id, which conflicts with relationship(s): 'Attachment.job_doc' (copies jobs.id to attachments.job_id), 'Job.job_documents' (copies jobs.id to attachments.job_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="job_doc,job_documents"' to the 'Attachment.job_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Bid.bid_attachments' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Bid.bid_attachments' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/home/phyl/.pyenv/versions/3.12.0/lib/python3.12/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Attachment.bid_rel' will copy column bids.id to column attachments.bid_id, which conflicts with relationship(s): 'Attachment.related_bid' (copies bids.id to attachments.bid_id), 'Bid.bid_related_attachments' (copies bids.id to attachments.bid_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="bid_related_attachments,related_bid"' to the 'Attachment.bid_rel' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
127.0.0.1 - - [21/May/2025 12:13:50] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:50] "POST /api/projects HTTP/1.1" 201 -
127.0.0.1 - - [21/May/2025 12:13:50] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:50] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "POST /api/login HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "POST /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "POST /api/projects/1/select-winner HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:13:51] "GET /api/projects/1/bids HTTP/1.1" 200 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/test/clean-db HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/projects HTTP/1.1" 422 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/test/clean-db HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:20:57] "POST /api/projects HTTP/1.1" 422 -
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_document_access.py', reloading
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
[MOCK] Email sent to test_customer_new@example.com with subject 'New Bid Received' and body: A new bid has been submitted for your project: Test Bidding Project
Bid ID: 1, Professional: 2, Score: 81.00, Details: {'nca_score': 25.0, 'rating_score': 24.0, 'success_score': 12.0, 'location_score': 20.0, 'location_match_type': 'exact', 'total_score': 81.0, 'success_rate': '80.0%'}
Bid ID: 2, Professional: 3, Score: 54.50, Details: {'nca_score': 20.0, 'rating_score': 22.5, 'success_score': 12.0, 'location_score': 0, 'location_match_type': 'no_match', 'total_score': 54.5, 'success_rate': '80.0%'}
[MOCK] Email sent to test_pro_new@example.com with subject 'Bid Accepted' and body: Your bid for project Test Bidding Project has been accepted!
[MOCK] Email sent to test_pro2@example.com with subject 'Bid Not Selected' and body: Your bid for project Test Bidding Project was not selected.
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
 * Detected change in '/home/phyl/Development/Jagedo/Back End/test_document_access.py', reloading
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 928-551-840
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/test/clean-db HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/login HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/login HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/login HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/projects/create HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/test/clean-db HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/login HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/login HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/login HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/auth/register HTTP/1.1" 404 -
127.0.0.1 - - [21/May/2025 12:23:07] "POST /api/projects/create HTTP/1.1" 404 -
